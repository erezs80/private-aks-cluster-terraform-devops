name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none
pr: none

variables:
- group: global-variables
- name: azureSubscription
  value: "Erezs Test Subscription"
- name: environment
  value: production
- name: helmVersion
  value: latest
- name: workloadChartName
  value: syntheticapi
- name: workloadChartVersion
  version: 0.1.0
- name: workloadReleaseName
  value: testapi
- name: workloadNamespace
  value: testapi
- name: aksName
  value: ErezsTestAks
- name: resourceGroupName
  value: ErezsTestRG
- name: location
  value: westeurope
- name: kubefile
  value: ./kubeconfig
- name: KUBECONFIG
  value: ./kubeconfig
- name: domain
  value: erezstest.com
- name: subdomain
  value: poc
  
pool: Terraform

stages :
- stage: helm_deployment
  displayName: Install Workload
  jobs: 
  - deployment: production
    displayName: Workload Deployment
    environment: $(environment)
    continueOnError: false
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - bash: |
              # Set ACR name lowercase
              acrName=$(echo $(registryServerName) | awk '{print tolower($0)}')
              echo "##vso[task.setvariable variable=acrName;]$acrName"
            failOnStderr: true
            displayName: 'ACR Name ToLower'
          - task: HelmInstaller@1
            displayName: 'Install Helm'
            enabled: false
            inputs:
              helmVersionToInstall: $(helmVersion)
          - task: AzureCLI@2
            displayName: 'Get AKS Credentials'
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              azureSubscription: $(azureSubscription)
              addSpnToEnvironment: true
              inlineScript: |
                # Get AKS credentials
                echo "Retrieving credentials for [$(aksName)] AKS cluster..."
                az aks get-credentials \
                  --name $(aksName) \
                  --resource-group $(resourceGroupName) \
                  --overwrite-existing \
                  --file $(kubefile) \
                  --admin \

                if  [[ $? == 0 ]]; then
                  echo "Successfully retrieved credentials for [$(aksName)] AKS cluster"
                else
                  echo "Failed to retrieve credentials for [$(aksName)] AKS cluster"
                  exit -1
                fi
          - task: AzureCLI@2
            displayName: 'Deploy Workload'
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              azureSubscription: $(azureSubscription)
              addSpnToEnvironment: true
              inlineScript: |
                # variables
                subscriptionName=$(az account show --query name --output tsv)

                # Allow installing Azure CLI extensions without prompt
                az config set extension.use_dynamic_install=yes_without_prompt

                # Login to ACR
                az acr login --name $(acrName) 

                # Retrieve ACR login server. Each container image needs to be tagged with the loginServer name of the registry. 
                echo "Logging to [$(acrName)] Azure Container Registry..."
                loginServer=$(az acr show --name $(acrName) --query loginServer --output tsv)

                 # Login to ACR via Helm
                token=$(az acr login --name $(acrName) --expose-token --output tsv --query accessToken)
                echo $token | helm registry login $loginServer \
                  --username 00000000-0000-0000-0000-000000000000 \
                  --password-stdin

                # Helm pull
                echo "Deleting [$(workloadChartName)] directory if a directory with the same name already exists..."
                if [ -d $(workloadChartName) ]; then 
                  rm -Rf $(workloadChartName)
                fi

                echo "Pulling [oci://$loginServer/helm/$(workloadChartName)]..."
                helm pull oci://$loginServer/helm/$(workloadChartName) --version $(workloadChartVersion) --untar

                # Check if the workload release already exists
                result=$(helm list -n $(workloadNamespace) | grep $(workloadReleaseName) | awk '{print $1}')
                dns="$(subdomain).$(domain)"

                if [[ -n $result ]]; then
                  echo "A [$(workloadReleaseName)] Helm release already exists in the [$(workloadNamespace)] namespace"
                  echo "Upgrading [$(workloadChartName)] Helm chart in the [$(workloadReleaseName)] Helm release..."

                  # Install Helm chart
                  helm upgrade \
                    --namespace $(workloadNamespace) \
                    --create-namespace \
                    --install \
                    --wait \
                    --timeout 30m \
                    --set image.repository=$loginServer/$(imageName) \
                    --set image.tag=$(imageTag) \
                    --set livenessProbe.initialDelaySeconds=300 \
                    --set readinessProbe.initialDelaySeconds=300 \
                    --set startupProbe.initialDelaySeconds=600 \
                    --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
                    --set ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt-nginx \
                    --set ingress.tls[0].hosts[0]=$dns \
                    --set ingress.hosts[0].host=$dns \
                    --version $(workloadChartVersion) \
                    $(workloadReleaseName) ./$(workloadChartName)
                else
                  echo "No [$(workloadReleaseName)] Helm release exists in the [$(workloadNamespace)] namespace"
                  echo "Installing [$(workloadChartName)] Helm chart to [$(workloadReleaseName)] Helm release..."

                  # Install Helm chart
                  helm install \
                    --namespace $(workloadNamespace) \
                    --create-namespace \
                    --wait \
                    --timeout 30m \
                    --set image.repository=$loginServer/$(imageName) \
                    --set image.tag=$(imageTag) \
                    --set livenessProbe.initialDelaySeconds=300 \
                    --set readinessProbe.initialDelaySeconds=300 \
                    --set startupProbe.initialDelaySeconds=600 \
                    --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
                    --set ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt-nginx \
                    --set ingress.tls[0].hosts[0]=$dns \
                    --set ingress.hosts[0].host=$dns \
                    --version $(workloadChartVersion) \
                    $(workloadReleaseName) ./$(workloadChartName)
                fi

                if  [[ $? == 0 ]]; then
                  echo "Successfully installed [$(workloadChartName)] Helm chart to [$(workloadReleaseName)] Helm release"
                else
                  echo "Failed to install [$(workloadChartName)] Helm chart to [$(workloadReleaseName)] Helm release"
                  exit -1
                fi